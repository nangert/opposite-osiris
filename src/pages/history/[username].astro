---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import * as postgres from "https://deno.land/x/postgres@v0.14.0/mod.ts";
import MatchHistory from "../../components/MatchHistory";

const { username } = Astro.params;

interface PlayerData {
    username: string;
    rating: number;
    place: number;
}

interface Player {
    username: string;
    user_id: string;
}

interface MatchHistoryItem {
    user_id: string;
    game_id: string;
    game_type: string;
    game_server: string;
    gauntlet_ticket_id: number | null;
    is_scored: boolean;
    is_winner: boolean;
    is_draw: boolean;
    is_player_1: boolean;
    faction_id: number;
    general_id: number;
    faction_xp: number;
    faction_xp_earned: number;
    opponent_id: string;
    opponent_faction_id: number;
    opponent_general_id: number;
    opponent_username: string;
    game_version: string;
    rewards: string | null;
    reward_ids: string | null;
    rank_before: number;
    rank_stars_before: number;
    rank_delta: number;
    rank_stars_delta: number;
    rank_win_streak: number;
    is_daily_win: boolean;
    play_count_reward_progress: number;
    win_count_reward_progress: number;
    has_maxed_play_count_rewards: boolean;
    has_maxed_win_count_rewards: boolean;
    created_at: number;
    updated_at: number;
    ended_at: number;
    status: string;
    gold_tip_amount: number | null;
    rift_ticket_id: null;
    rift_points: null;
    rift_points_earned: null;
    rift_rating_after: null;
    rift_rating_earned: null;
    digest: string;
}

var faction_ids = ["Lyonar", "Songhai", "Vanar", "Abyssian", "Magmar", "Vetruvian"];

const databaseUrl = import.meta.env.SECRET_DATABASEKEY;
const matchHistoryStart = import.meta.env.PUBLIC_MATCH_HISTORY_START;
const matchHistoryEnd = import.meta.env.PUBLIC_MATCH_HISTORY_END;
const token = import.meta.env.SECRET_DUELYST_TOKEN;

// const pool = new postgres.Pool(databaseUrl, 3, true);

// const connection = await pool.connect();

// const fetchallplayers = async () => {
//     return await connection.queryObject`SELECT * FROM players`;
// };

// const fetchplayer = async (username: string) => {
//     return await connection.queryObject`SELECT username, user_id FROM players where username = ${username}`;
// };

// const fetchPlayerHistory = async (user_id: string) => {
//     const url = matchHistoryStart.trim() + user_id.trim() + matchHistoryEnd.trim();
//     return fetch(url, {
//         method: "GET",
//         headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${token}`,
//         },
//     })
//         .then(response => {
//             if (!response.ok) {
//                 throw new Error("Network response was not ok");
//             }
//             return response.json();
//         })
//         .then(data => {
//             return data;
//         })
//         .catch(error => {
//             console.error("There was a problem with the fetch operation:", error);
//         });
// };

let player: Player[] = [];
let playerHistory: MatchHistoryItem[] = [];
if (username) {
    //player = await fetchplayer(username).then(response => response.rows);
    //const players = await fetchallplayers().then(response => response);
    //playerHistory = await fetchPlayerHistory("-NJW19A1jvOyXiVn-Wy7").then(response => response);
}
---

<Layout>
    <Header activeNav="history" />
    <main id="main-content">
        <section id="hero">
            <h1>History</h1>
            <br />

            <!-- <MatchHistory client:load searchList={playerHistory} player={"nangert"} /> -->
        </section>
    </main>
    <Footer />
</Layout>

<style>
    /* ===== Hero Section ===== */
    #winner {
        color: #36f1d2;
    }

    #loser {
        color: #cc0f4b;
    }
    #hero {
        @apply pt-8 pb-6;
    }

    #matchHistory {
        @apply text-center;
    }
    #hero h1 {
        @apply my-4 inline-block text-3xl font-bold sm:my-8 sm:text-5xl;
    }
    #hero .rss-link {
        @apply mb-6;
    }
    #hero .rss-icon {
        @apply mb-2 h-6 w-6 scale-110 fill-skin-accent sm:mb-3 sm:scale-125;
    }
    #hero p {
        @apply my-2;
    }
    .social-wrapper {
        @apply mt-4 flex flex-col sm:flex-row sm:items-center;
    }
    .social-links {
        @apply mr-2 mb-1 whitespace-nowrap sm:mb-0;
    }

    /* ===== Featured & Recent Posts Sections ===== */
    #featured,
    #recent-posts {
        @apply pt-12 pb-6;
    }
    #featured h2,
    #recent-posts h2 {
        @apply text-2xl font-semibold tracking-wide;
    }
    .all-posts-btn-wrapper {
        @apply my-8 text-center;
    }
</style>
